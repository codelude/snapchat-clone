{"version":3,"sources":["features/cameraSlice.js","WebcamCapture.js","firebase.js","features/appSlice.js","Preview.js","Chat.js","Chats.js","ChatView.js","Login.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["cameraSlice","createSlice","name","initialState","cameraImage","reducers","setCameraImage","state","action","payload","resetCameraImage","actions","selectCameraImage","camera","videoConstraints","width","height","facingMode","WebcamCapture","webcamRef","useRef","dispatch","useDispatch","history","useHistory","capture","useCallback","imageSrc","current","getScreenshot","push","className","audio","ref","screenshotFormat","onClick","fontSize","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","auth","storage","provider","GoogleAuthProvider","appSlice","user","selectedImage","login","logout","selectImage","resetImage","selectUser","app","selectSelectedImage","Preview","useSelector","useEffect","replace","src","alt","id","uuid","putString","on","error","console","log","child","getDownloadURL","then","url","collection","add","imageUrl","username","read","profilePic","timestamp","FieldValue","serverTimestamp","Chat","doc","set","merge","Avatar","date","Date","toDate","toUTCString","Chats","useState","posts","setPosts","orderBy","onSnapshot","snapshot","docs","map","data","signOut","placeholder","type","ChatView","exit","isPlaying","duration","strokeWidth","size","colors","remainingTime","Login","Button","variant","signInWithPopup","result","displayName","photoURL","uid","catch","alert","message","App","onAuthStateChanged","authUser","path","exact","configureStore","reducer","appReducer","cameraReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7266968c.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const cameraSlice = createSlice({\n  name: \"camera\",\n  initialState: {\n    cameraImage: null,\n  },\n  reducers: {\n    setCameraImage: (state, action) => {\n      state.cameraImage = action.payload;\n    },\n    resetCameraImage: (state) => {\n      state.cameraImage = null;\n    },\n  },\n});\n\nexport const { setCameraImage, resetCameraImage } = cameraSlice.actions;\n\nexport const selectCameraImage = (state) => state.camera.cameraImage;\n\nexport default cameraSlice.reducer;\n","import React, { useCallback, useRef, useState } from \"react\";\nimport Webcam from \"react-webcam\";\nimport RadioButtonUncheckedIcon from \"@material-ui/icons/RadioButtonUnchecked\";\nimport { useDispatch } from \"react-redux\";\nimport { setCameraImage } from \"./features/cameraSlice\";\nimport { useHistory } from \"react-router-dom\";\nimport \"./WebcamCapture.css\";\n\nconst videoConstraints = {\n  width: 250,\n  height: 400,\n  facingMode: \"user\",\n};\n\nfunction WebcamCapture() {\n  const webcamRef = useRef(null);\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  const capture = useCallback(() => {\n    const imageSrc = webcamRef.current.getScreenshot();\n    dispatch(setCameraImage(imageSrc));\n    history.push(\"/preview\");\n  }, [webcamRef]);\n\n  return (\n    <div className=\"webcamCapture\">\n      <Webcam\n        audio={false}\n        height={videoConstraints.height}\n        ref={webcamRef}\n        screenshotFormat=\"image/jpeg\"\n        width={videoConstraints.width}\n        videoConstraints={videoConstraints}\n      />\n\n      <RadioButtonUncheckedIcon\n        className=\"webcamCapture__button\"\n        onClick={capture}\n        fontSize=\"large\"\n      />\n    </div>\n  );\n}\n\nexport default WebcamCapture;\n","import firebase from \"firebase\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBMh_GSaKV1K4sKwck8NP5m_dUwiwlDDiA\",\n  authDomain: \"snapchat-clone-yt.firebaseapp.com\",\n  projectId: \"snapchat-clone-yt\",\n  storageBucket: \"snapchat-clone-yt.appspot.com\",\n  messagingSenderId: \"1032610135706\",\n  appId: \"1:1032610135706:web:196625215f3eca5b8c6923\",\n};\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\nconst db = firebaseApp.firestore();\nconst auth = firebase.auth();\nconst storage = firebase.storage();\nconst provider = new firebase.auth.GoogleAuthProvider();\n\nexport { db, auth, storage, provider };\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const appSlice = createSlice({\r\n  name: \"app\",\r\n  initialState: {\r\n    user: null,\r\n    selectedImage: null,\r\n  },\r\n  reducers: {\r\n    login: (state, action) => {\r\n      state.user = action.payload;\r\n    },\r\n    logout: (state) => {\r\n      state.user = null;\r\n    },\r\n    selectImage: (state, action) => {\r\n      state.selectedImage = action.payload;\r\n    },\r\n    resetImage: (state) => {\r\n      state.selectedImage = null;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { login, logout, selectImage, resetImage } = appSlice.actions;\r\n\r\nexport const selectUser = (state) => state.app.user;\r\n\r\nexport const selectSelectedImage = (state) => state.app.selectedImage;\r\n\r\nexport default appSlice.reducer;\r\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { resetCameraImage, selectCameraImage } from \"./features/cameraSlice\";\nimport \"./Preview.css\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport TextFieldsIcon from \"@material-ui/icons/TextFields\";\nimport CreateIcon from \"@material-ui/icons/Create\";\nimport NoteIcon from \"@material-ui/icons/Note\";\nimport MusicNoteIcon from \"@material-ui/icons/MusicNote\";\nimport AttachFileIcon from \"@material-ui/icons/AttachFile\";\nimport CropIcon from \"@material-ui/icons/Crop\";\nimport TimerIcon from \"@material-ui/icons/Timer\";\nimport SendIcon from \"@material-ui/icons/Send\";\nimport { v4 as uuid } from \"uuid\";\nimport { db, storage } from \"./firebase\";\nimport firebase from \"firebase\";\nimport { selectUser } from \"./features/appSlice\";\n\nfunction Preview() {\n  const cameraImage = useSelector(selectCameraImage);\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const user = useSelector(selectUser);\n\n  useEffect(() => {\n    if (!cameraImage) {\n      history.replace(\"/\");\n    }\n  }, [cameraImage, history]);\n\n  const closePreview = () => {\n    dispatch(resetCameraImage());\n  };\n\n  const sendPost = () => {\n    const id = uuid();\n    const uploadTask = storage\n      .ref(`posts/${id}`)\n      .putString(cameraImage, \"data_url\");\n\n    uploadTask.on(\n      \"state_changed\",\n      null,\n      (error) => {\n        // ERROR function\n        console.log(error);\n      },\n      () => {\n        // COMPLETE function\n        storage\n          .ref(\"posts\")\n          .child(id)\n          .getDownloadURL()\n          .then((url) => {\n            db.collection(\"posts\").add({\n              imageUrl: url,\n              username: user.username,\n              read: false,\n              profilePic: user.profilePic,\n              timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n            });\n            history.replace(\"/chats\");\n          });\n      }\n    );\n  };\n\n  return (\n    <div className=\"preview\">\n      <CloseIcon onClick={closePreview} className=\"preview__close\" />\n      <div className=\"preview__toolbarRight\">\n        <TextFieldsIcon />\n        <CreateIcon />\n        <NoteIcon />\n        <MusicNoteIcon />\n        <AttachFileIcon />\n        <CropIcon />\n        <TimerIcon />\n      </div>\n      <img src={cameraImage} alt=\"\" />\n      <div onClick={sendPost} className=\"preview__footer\">\n        <h2>Send Now</h2>\n        <SendIcon fontSize=\"small\" className=\"preview__sendIcon\" />\n      </div>\n    </div>\n  );\n}\n\nexport default Preview;\n","import { Avatar } from \"@material-ui/core\";\nimport React from \"react\";\nimport \"./Chat.css\";\nimport StopRoundedIcon from \"@material-ui/icons/StopRounded\";\nimport ReactTimeago from \"react-timeago\";\nimport { selectImage } from \"./features/appSlice\";\nimport { useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { db } from \"./firebase\";\n\nfunction Chat({ id, username, timestamp, read, imageUrl, profilePic }) {\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  const open = () => {\n    if (!read) {\n      dispatch(selectImage(imageUrl));\n      db.collection(\"posts\").doc(id).set(\n        {\n          read: true,\n        },\n        { merge: true }\n      );\n\n      history.push(\"/chats/view\");\n    }\n  };\n\n  return (\n    <div onClick={open} className=\"chat\">\n      <Avatar className=\"chat__avatar\" src={profilePic} />\n      <div className=\"chat__info\">\n        <h4>{username}</h4>\n        <p>\n          {!read && \"Tap to view -\"}{\" \"}\n          <ReactTimeago date={new Date(timestamp?.toDate()).toUTCString()} />\n        </p>\n      </div>\n\n      {!read && <StopRoundedIcon className=\"chat__readIcon\" />}\n    </div>\n  );\n}\n\nexport default Chat;\n","import { Avatar } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./Chats.css\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport ChatBubbleIcon from \"@material-ui/icons/ChatBubble\";\nimport { auth, db } from \"./firebase\";\nimport Chat from \"./Chat\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectUser } from \"./features/appSlice\";\nimport RadioButtonUncheckedIcon from \"@material-ui/icons/RadioButtonUnchecked\";\nimport { useHistory } from \"react-router-dom\";\nimport { resetCameraImage } from \"./features/cameraSlice\";\n\nfunction Chats() {\n  const [posts, setPosts] = useState([]);\n  const user = useSelector(selectUser);\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  useEffect(() => {\n    db.collection(\"posts\")\n      .orderBy(\"timestamp\", \"desc\")\n      .onSnapshot((snapshot) =>\n        setPosts(\n          snapshot.docs.map((doc) => ({\n            id: doc.id,\n            data: doc.data(),\n          }))\n        )\n      );\n  }, []);\n\n  const takeSnap = () => {\n    dispatch(resetCameraImage());\n    history.push(\"/\");\n  };\n\n  return (\n    <div className=\"chats\">\n      <div className=\"chats__header\">\n        <Avatar\n          src={user.profilePic}\n          onClick={() => auth.signOut()}\n          className=\"chats__avatar\"\n        />\n        <div className=\"chats__search\">\n          <SearchIcon className=\"chats__searchIcon\" />\n          <input placeholder=\"Friends\" type=\"text\" />\n        </div>\n        <ChatBubbleIcon className=\"chats__chatIcon\" />\n      </div>\n\n      <div className=\"chats__posts\">\n        {posts.map(\n          ({\n            id,\n            data: { profilePic, username, timestamp, imageUrl, read },\n          }) => (\n            <Chat\n              key={id}\n              id={id}\n              username={username}\n              timestamp={timestamp}\n              imageUrl={imageUrl}\n              read={read}\n              profilePic={profilePic}\n            />\n          )\n        )}\n      </div>\n\n      <RadioButtonUncheckedIcon\n        className=\"chats__takePicIcon\"\n        onClick={takeSnap}\n        fontSize=\"large\"\n      />\n    </div>\n  );\n}\n\nexport default Chats;\n","import React, { useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport \"./ChatView.css\";\nimport { selectSelectedImage } from \"./features/appSlice\";\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\n\nfunction ChatView() {\n  const selectedImage = useSelector(selectSelectedImage);\n  const history = useHistory();\n\n  useEffect(() => {\n    if (!selectedImage) {\n      exit();\n    }\n  }, [selectedImage]);\n\n  const exit = () => {\n    history.replace(\"/chats\");\n  };\n\n  return (\n    <div className=\"chatView\">\n      <img src={selectedImage} onClick={exit} alt=\"\" />\n      <div className=\"chatView__timer\">\n        <CountdownCircleTimer\n          isPlaying\n          duration={10}\n          strokeWidth={6}\n          size={50}\n          colors={[\n            [\"#004777\", 0.33],\n            [\"#F7B801\", 0.33],\n            [\"#A30000\", 0.33],\n          ]}\n        >\n          {({ remainingTime }) => {\n            if (remainingTime === 0) {\n              exit();\n            }\n\n            return remainingTime;\n          }}\n        </CountdownCircleTimer>\n      </div>\n    </div>\n  );\n}\n\nexport default ChatView;\n","import { Button } from \"@material-ui/core\";\nimport React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { login } from \"./features/appSlice\";\nimport { auth, provider } from \"./firebase\";\nimport \"./Login.css\";\n\nfunction Login() {\n  const dispatch = useDispatch();\n\n  const signIn = () => {\n    auth\n      .signInWithPopup(provider)\n      .then((result) => {\n        dispatch(\n          login({\n            username: result.user.displayName,\n            profilePic: result.user.photoURL,\n            id: result.user.uid,\n          })\n        );\n      })\n      .catch((error) => alert(error.message));\n  };\n\n  return (\n    <div className=\"login\">\n      <div className=\"login__container\">\n        <img src=\"https://scx2.b-cdn.net/gfx/news/2017/1-snapchat.jpg\" alt=\"\" />\n        <Button variant=\"outlined\" onClick={signIn}>\n          Sign in\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default Login;\n","import React, { useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport WebcamCapture from \"./WebcamCapture\";\r\nimport Preview from \"./Preview\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport Chats from \"./Chats\";\r\nimport ChatView from \"./ChatView\";\r\nimport { login, logout, selectUser } from \"./features/appSlice\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Login from \"./Login\";\r\nimport { auth } from \"./firebase\";\r\n\r\nfunction App() {\r\n  const user = useSelector(selectUser);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    auth.onAuthStateChanged((authUser) => {\r\n      if (authUser) {\r\n        dispatch(\r\n          login({\r\n            username: authUser.displayName,\r\n            profilePic: authUser.photoURL,\r\n            id: authUser.uid,\r\n          })\r\n        );\r\n      } else {\r\n        dispatch(logout());\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <Router>\r\n        {!user ? (\r\n          <Login />\r\n        ) : (\r\n          <>\r\n            <img\r\n              className=\"app__logo\"\r\n              src=\"https://lakeridgenewsonline.com/wp-content/uploads/2020/04/snapchat.jpg\"\r\n              alt=\"\"\r\n            />\r\n            <div className=\"app__body\">\r\n              <div className=\"app__bodyBackground\">\r\n                <Switch>\r\n                  <Route path=\"/chats/view\">\r\n                    <ChatView />\r\n                  </Route>\r\n                  <Route path=\"/chats\">\r\n                    <Chats />\r\n                  </Route>\r\n                  <Route path=\"/preview\">\r\n                    <Preview />\r\n                  </Route>\r\n                  <Route exact path=\"/\">\r\n                    <WebcamCapture />\r\n                  </Route>\r\n                </Switch>\r\n              </div>\r\n            </div>\r\n          </>\r\n        )}\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport appReducer from \"../features/appSlice\";\r\nimport cameraReducer from \"../features/cameraSlice\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    app: appReducer,\r\n    camera: cameraReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}